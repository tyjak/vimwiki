= Archlinux =

Mes notes sur l'installation d'Archlinux


== Installation from scratch ==
 * Attention de ne pas lancer l'utilitaire de partitionnement sur une partition mais bien sur le disque lui même
 * Pour le macbook voir https://wiki.archlinux.org/index.php/MacBook
 * Un autre lien pour une installation pas à pas https://medium.com/@philpl/arch-linux-running-on-my-macbook-2ea525ebefe3
 * ou encore https://mchladek.me/post/arch-mbp
 * Un lien plus récent avec cryptage du disque et partition LVM http://loicpefferkorn.net/2015/01/arch-linux-on-macbook-pro-retina-2014-with-dm-crypt-lvm-and-suspend-to-disk/

=== Notes à propos de VMware et Virtualbox ===
 * pb sur le driver video suite à l'upgrade -> obligé de réinstaller les anciens pilotes
   ex : `pacman -U /var/cache/pacman/pkg/xf86-video-intel-2.99.912-1-x86_64.pkg.tar.xz`

=== En cas de plantage durant une installation ===
 * voir les paquets à réinstaller : `sudo ldconfig 2>&1 | cut -d' ' -f3 | xargs pacman -Qo`
 * réinstaller avec les dépendances si nécessiare : `pactree -d1 -u {nom du paquet} | sudo pacman -S --force -`
 * avec toutes les dépendances `pactree -u {nom du paquet} | sudo pacman -S --force -`

== Customisation ==

=== Installation de yaourt (obsolète) ===

#Dans /etc/pacman.conf :
#{{{
#[archlinuxfr]
#SigLevel = Never
#Server = http://repo.archlinux.fr/$arch
#}}}
#puis installer avec `pacman -Sy yaourt`
#
#pour désinstaller un packet ainsi que ses dépendances : yaourt -Rsc {nom du paquet)

=== Utiliser Yay pour gérer les packages ===

 * `yay -Syu` pour tous mettre à jours
 * `yay -Syu --repo` uniquement pout les repos (hors aur)
 * `yay -Syu --aur` uniquement pout AUR
 * `yay -Qua` voir les packages AU à mettre à jours
 * `yay -Yc` pour supprimer les dépendances inutilisées


=== Les paquets indispensables ===

 * termite en remplacement de urxvt terminal + urxvt-perls
 * [[https://github.com/ervandew/urxvt-vim-scrollback|urxvt-vim-scrollback]]
 * i3-wm gestionnaire de fenêtre
 * xss-lock + i3lock-blur pour locker l'écran
 * dmenu2
 * pass
 * passdmenu
 * dunst + libnotify pour avoir des notifications
 * dwb ou vimb comme navigateur web
 * feh pour gérer l'image du fond
 * hot-solarized-vi pour un top colorisée avec raccourcis vi
 * slim pour avoir un écran de login
 * llpp-git pour visualiser des pdf
 * otf-inconsolata-powerline-git (police avec support powerline)
 * otf-powerline-symbols-git (police avec support powerline)
 * ttf-bitstream-vera
 * ttf-weather-icons
 * pinta logiciel de retouche image
 * pommed-light pour gérer les touches mac sons/lumieres
 * xclip & xsel & xclipboard & clipmenud pour gérer les copier/collé
 * nuvolaplayer pour la musique en ligne
 * unclutter pour masquer la souris
 * mutt pour les mails
 * urlview pour les liens dans les mails
 * mps-youtube pour une cli youtube
 * pulseaudio-alsa + libpulse-raop2 (airplay)
 * paprefs + pavucontrol (gui control for pulseaudio)
 * rainbowstream twitter cli client (via pip)
 * newsbeuter rss cli lcient
 * iftop
 * nethogs (voir ce qui consomme la bande passante)
 * remmina
 * wego meteo dans le terminal
 * socat (pour utiliser les socket de vimb)
 * googlecl
 * fortune-mod
 * pm-utils (hibernate & suspend)
 * inotify-tools
 * rtv (reddit terminal viewer)
 * pyradio
 * blueman
 * insync (google drive)
 * maim + slop pour les screenshot
 * cmus cli pour la musique
 * mpd + ncmcpp + cli-visualizer pour la musique
 * tig pour la gestion de dépots git
 * FontManager pour visualiser les polices installées
 * Xbindkeys pour mapper des touches du clavier sous session X
 * powertop et tlp (gérer la batterie)
 * ranger (file manager)
 * gnu-netcat (pour i3pystatus anybar)
 * compton (transistion entre les fenetres)
 * pal calendrier cli
 * acpilight (et faire sudo chmod a+w /sys/class/backlight/intel_backlight/brightness)
 * arandr pour la gestion des écrans
 * udiskie pour le montage automatique des diks (TODO: ansible déploiement)
 * jq pour parser du json en ligne de commande
 * vimiv pour visualiser/modifier des images mode vim
 * wuzz commande interactive pour inspecter des requetes http
 * screenfetch pour avoir des infos sur le system
 * dmidecode -> system info via `sudo dmidecode -t system`
 * gotop -> system monitoring tool
 * stack && herms (cli for cook recipes managment)
 * apvlv pdv viewer with vim command

=== SLIM avec clavier azerty ===

Cette ligne : `Option "XkbLayout" "fr"` doit être ajouté dans la section du
clavier de X11.

Exemple pour `/etc/X11/xorg.conf.d/40-libinput.conf` :

{{{
# Match on all types of devices but joysticks
Section "InputClass"
        Identifier "libinput pointer catchall"
        MatchIsPointer "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
EndSection

Section "InputClass"
        Identifier "libinput keyboard catchall"
        MatchIsKeyboard "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        Option "XkbLayout" "fr"
EndSection

Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Option "Tapping" "1"
        Driver "libinput"
EndSection
}}}

=== Ajout d'un écran de lock à la suspension ===

Installer le package `xss-lock` et ajouter dans `.xinitrc` :
`xss-lock i3lock -f &`

==== Faire le ménage ====

- Voir la place libérée : `sudo paccache -d`
- Supprime le cache et garde les 3 dernières versions : `sudo paccache -r`

=== I3 window manager ===

 * i3pystatus-git pour des infos dans la barre de menu

==== Gestion remplissage de mot de passe ====
 * avoir `passdmenu.py`
 * passer les arguments à passdmenu.py via un script shell :
   {{{
        #!/bin/sh
        DMENU_HEIGHT=${DMENU_HEIGHT:=24}
        DMENU_FONT=${DMENU_FONT:=MesloLGSDZ Nerd Font-10}
        /usr/bin/dmenu -i -nb '#002b24' -nf '#eee8d5' -sb '#b58900' -fn "$DMENU_FONT" -h $DMENU_HEIGHT
        }}}
 * Pour avoir le login et mdp rempli dans i3 : `passdmenu.py -u -x p,s -P --type -r -D ~/share/bin/mypassdmenu`
 * passdmenu.py : https://github.com/klaasb/passdmenu

==== Faire un workspace par application ====

Créer un fichier executable au nom de l'application à lancer dans dmenu
{{{
#!/bin/sh
ISRUNNING=$( ps -eo cmd | grep -c '[u]rxvt -title reddit' )
i3-msg -t command "workspace reddit; exec [ $ISRUNNING -eq 0 ] && urxvt -title reddit -e rtv"
}}}

Mettre ce fichier dans un repertoire qui se trouve dans le PATH (pour moi il s'agit de ~/share/bin)
Utiliser dmenu pour lancer l'application ou switcher dessus.

=== Police de caractère ===

 * ttf-meslo-powerline
 * icons
 * ttf-fontawesome
 * utilitaire de gestion/visualisation de police : FontManager

=== Thème Solarized, airline et GTK ===

 * lxappearance pour changer l'apparence des applications

=== Wifi démarrage auto du wifi ===

 * `netctl enable {nom du profil}`
 * pour trouver le nom du profil actif et des autres : `netctl list`
 * si pb "network not found" alors essayer `sudo rfkill unblock all`


=== Réglage horloge ===

 * pour voir les horloges : `timedatectl`
 * pour régler UTC : ` sudo ntpd -qg`
 * `timedatectl set-local-rtc 1` # 0 pour la remettre sur UTC
 * plus d'info : https://wiki.archlinux.fr/Horloge

=== Configuration du clavier ===

 * générer le fichier ~/.Xmodmap : `xmodmap -kpe > ~/.Xmodmap`
 * éditer le fichier ~/.Xmodmap pour modifier les touches par défaut
 * voir la fin du fichier pour voir comment modifier le comportement de la touche caps
 * `xmodmap ~/.Xmodmap` pour appliquer les changements
 * Pour ne pas éteindre directement via la touche power : dans `/etc/systemd/logind.conf` mettre `HandlePowerKey=ignore` puis assigner pour i3 la touche 124 dans .Xmodmap (voir https://wiki.archlinux.org/index.php/I3#Shutdown.2C_reboot.2C_lock_screen )

=== Ajout d'un résolution écran ===

 * `cvt 1280 1024`
 * `xrandr --newmode "1280x1024" {suivi du reste de la 2eme ligne resultant de cvt}`
 * `xrandr --addmode {ecran cible} 1280x1024`
 * `xrandr --ouput {ecran cible} --mode 1280x1024`
Plus d'info : https://wiki.archlinux.org/index.php/Xrandr

=== Barre de status ===

 * [[configuration de i3pystatus-git]]

=== Barre de lancement ===

 * installation de dmenu-xft-height puis customisation dans ~/.config/i3/config :
   `bindsym $mod+d exec dmenu_run -i -nb '#859900' -nf '#eee8d5' -sb '#cb4b16' -fn 'Meslo LG S DZ for Powerline-10' -h 24`

=== Configuration des touches spéciales ===

 * voir le fichier `/etc/acpi/handler.sh`
 * pour savoir le nom de la touche a utilisé dans le handler.sh : `acpi_listen` et appuyer sur la touche

=== Ajout de règle udev ===

 Lancer un script à la connexion/deconnexion d'un périphérique :
 * voir https://wiki.archlinux.org/index.php/udev
 * créer un script se terminannt par .rules
 * copier un script déjà existant : /usr/lib/udev/rules.d/70-power-switch.rules
 * voir les infos du device `# udevadm info -a -p /sys/class/backlight/acpi_video0`
 * modfier la régle copier avec les info récupérée
 * faire `udevadm trigger` si la règle n'est pas prise en compte
 * si la règle ne fonctionne pas faire un `# udevadm test $(udevadm info -q path -n [device name]) 2>&1`

 Exemple de règle :
 {{{
    ACTION=="add"
    SUBSYSTEM=="usb"
    ENV{ID_FS_UUID}=="679752b5-4bbb-40ec-b7e7-fde992d07151"
    ENV{UDISKS_SYSTEM}="0"
    ENV{UDISKS_AUTO}="1"
    RUN+="/usr/bin/logger --tag my-usbkey Attached"
 }}}


=== Installation Trackpad ===

==== Ligne de commande ====
 * voir https://wiki.archlinux.org/index.php/bluetooth
 * et voir http://support.apple.com/kb/HT2845
   Turn on the Magic Trackpad by pressing the on/off button until the indicator light comes on. The indicator light glows steadily for 2 to 3 seconds to indicate the batteries are good. After that, the light will blink to indicate your trackpad is in discovery mode.
 * ajouter une [[conf X11 trackpad]]
 * modifier dans le fichier /etc/bluetooth/main.conf mettre à true AutoEnable
 * si le trackpad ne fonctionne pas il faut à nouveau le jumeler en lançant `bluetoothctl`
 {{{
    remove 60:C5:47:81:AC:AD
    agent on
    default-agent
    scan on
    pair 60:C5:47:81:AC:AD
    trust 60:C5:47:81:AC:AD
    connect 60:C5:47:81:AC:AD
 }}}

==== Interface graphique ====
 * le plus simple reste de passer par une interface graphique : blueman-manager
 * Si même pb pour reconnecter essayer `sudo hciconfig hci0 reset`
 * Puis faire installation...
 * pour info la connexion se fait avec Human Interface Device

==== Pb reglage ====
J'ai eu un pb avec le pad qui ne cliquait plus : un autre pad a été activé, il suffisait de le désactiver
 * `xinput --list`
 * `xinput disable X`

=== Installation d'une imprimante réseau ===

 * installer le paquet cups
 * éditer le fichier /etc/cups/client.conf pour ajouter l'ip de l'imprimante
 * dans .xinitrc ajouter la varibale PRINTER={nom de l'imprimante}
 * pour tester si l'imprimante est bien installé : `lpstat -p -d`
 * pour imprimer un fichier `lpr filename`

=== Connexion Freebox OpenVPN ===
    ==== Configuration ====
     * copier le fichier utilisateur de la freebox  `cp ~/downloads/config_openvpn_bridge_{$USER}.ovpn /etc/openvpn/freebox.conf`
     * créer le fichier reseau pour [[openvpnclient]] pour l'interface virtuel dans `/etc/netctl` voir https://wiki.archlinux.org/index.php/OpenVPN_Bridge (mais ne pas installer le fichier bridge que tap)
     * démarrer l'interface `netctl enable openvpn_tap`
    ==== Demarrage ====
     * démarrer le service `systemctl start openvpn@freebox.service`
     * puis `dhcpd tap0` pour obtenir une ip
     * si pb pour obtenir l'adresse ip, redémarrer faire un `systemctl restart dhcpcd`

=== Connexion VPN PPTP ===
    ==== Configuration ====
    * voir les fichiers dans /etc/ppp/peers
    * ajout d'une nouvelle conf en cli : `pptpsetup --create-tunel {nom_de_la_connecion} --server {IP_NAME} --login {login} --password {pass} encrypted`
    ==== Démarrage ====
    * `pon {nom_de_la_connection}`
    * `poff` pout arréter la connexion

=== Connexion modem WWAN 4G ===

 * https://wiki.archlinux.org/index.php/ThinkPad_mobile_internet
 * peut aider : https://lists.freedesktop.org/archives/modemmanager-devel/2017-September/005804.html
 * http://www.embeddedpi.com/documentation/3g-4g-modems/raspberry-pi-sierra-wireless-mc7304-modem-qmi-interface-setup
 * https://forums.lenovo.com/t5/Linux-Discussion/Mobile-Broadband-X1-Ubuntu-16-04/td-p/3720487

=== Changer le navigateur web par défault ===

 * installer `xdg-utils`
 * mettre dans .zshrc `export BROWSER=xdg-open`
 * créer le dossier pour les application associées au mimes types `mkdir ~/.local/share/applications`
 * créer le fichier vimb.desktop
    {{{
    #!/usr/bin/env xdg-open
    [Desktop Entry]
    Version=1.0
    Terminal=false
    Type=Application
    Name=Vimb
    Exec=i3-msg -t command workspace 2:web; layout tabbed; exec /usr/bin/vimb
    NoDisplay=true
    }}}
 * mettre ce fichier dans le dossier `applications` créer précedemment
 * puis executer la commande `dg-mime default vimb.desktop x-scheme-handler/http` pour avoir vimb par défaut
 * il est possible aussi d'éditer le fichier `~/.config/mimeapps.list` pour modifier les applications par défaut lancées par `xdg-open`
 * plus d'info : https://wiki.archlinux.org/index.php/xdg-open#Set_the_default_browser et https://wiki.archlinux.org/index.php/Default_applications#MIME_types_and_desktop_entries
 * autre solution : installer mimeo :
   {{{
   mimeo --mimean-help
   mimeo --mimetype #liste des mimetype
   mimoe --app2desk #liste des application desktop
   mimeo --prefer "x-scheme-handler/http" vimb.desktop
   }}}


=== Gestionnaire de mot de passe ===

Utilisation de [[https://www.passwordstore.org/|pass]] avec cryptage GPG pour la gestion des mots de passe

* `pass -c web/skype` pour obtenir le mot de passe de skype 45sec. dans le presse papier
* `pass web/skype | qrencode -t UTF8` pour afficher le qrcode du mot de passe


=== Modifier les options de démarrages d'un daemon ===

* `systemctl edit [nom du daemon]` pour un paramétrage personaliser
* `systemctl remove [nom du daemon]` pour revenir à l'état d'origine
* plus d'info : https://wiki.archlinux.org/index.php/Systemd#Editing_provided_units
* voir également https://naftuli.wtf/2017/12/28/systemd-user-environment/ pour l'environement user
* un tuto :https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files

=== Régler un pb (TODO)===

 * journal des événements `journalctl -xn`
 * `journalctl -f` pour voir tous ce qui se passe
 * `journalctl -n -u bluetooth` pour voir les derniers logs concernant le bluetooth
 * `journalctl -p err -b` pour voir les erreurs du dernier boot
 * `systemctl status acpid` pour voir l'état d'un service

==== Example de résolution d'un pb ====
acpid ne semblait ne pas fonctionner :
 * il m'a fallu arrêter le service `sudo systemctl stop acpid`
 * et le faire fonctionner en mode debug -d sans socket -S et en avant plan -f et en mode daemon : `sudo acpid -ldfS` et là j'ai pu voir ce qui ne fonctionnait pas.
 * ou bien changer directement dans le fichier de service acpid (pour savoir faire un disable/enable du service)
 * pb avec acpid pour X ne peut utiliser xrandr directement car il lui manque un context (DISPLAY et XAUTHORITY) et avec le script hotplug_monitor.sh idem voir https://bbs.archlinux.org/viewtopic.php?id=186179 pour un début de solution
 * la solution est de mettre le code qui suit en début de fichier /etc/acpi/handler.sh
 {{{
        function GetXuser()
        {
          #Guess the user logged on server $1
          w|grep " $1 "|cut -d " " -f 1|head -n 1
        }
        export DISPLAY=:0.0
        export XAUTHORITY=/home/$(GetXuser $DISPLAY)/.Xauthority
 }}}

=== Boot ===

 * utilisation partition 200MB en FAT32 monté sur /boot
 * `mkinitcpio -p linux` pour génére l'image initrd - si pas présente
 * utilisation de gummiboot `gummiboot --path=/boot/ install`
 * créer la configarution (/boot/loader/loader.conf et /boot/loader/entries/arch.conf)
 * voir [[https://wiki.archlinux.org/index.php/gummiboot|gummiboot]]
 * sur OS X pour rendre bootable la partition : `mkdir /Volumes/EFI-arch && mount -t vfat /dev/sdb1 && sudo bless --mount=/Volumes/EFI-arch` (A vérifier)

=== Batterie / secteur ===

* utilisation de `tlp` avec paramétrage de son fichier de conf `/etc/default/tlp`
* pour voir si un montage est passé en ro : `findmnt`
* pour lister les devices usb : `lsusb`
* NOTE remplacement de la batterie le 16/02/2019
  févr. 17 23:03:38 archy.local upowerd[3135]: energy_full (54,582400) is greater than energy_full_design (53,280000)

==== Hibernate ====

TODO: résussir à faire fonctionner l'hibernation
Le mode hibernate ne fonctionne pas. Peut-être à cause du fait que le fichier swap est sur la mémoire usb.

Ci après l'installation pour le mode hibernate:
 * Utilisation du mode swapfile voir [[https://wiki.archlinux.org/index.php/Swap#Manually|doc]] 
 * `sudo fallocate -l 4096M /home/swapfile`
 * `sudo chmod 600 /home/swapfile`
 * `sudo mkswap /home/swapfile`
 * `sudo swapon /home/swapfile`
 * ajout de `/swapfile none swap defaults 0 0` dans `/etc/fstab`
 * ajout de [[https://wiki.archlinux.org/index.php/Power_management/Suspend_and_hibernate#Hibernation_into_swap_file|paramétrage dans le noyau]]
 * et enfin ajout de `resume` dans le hook de `/etc/mkinitcpio.conf`
 
Etudier le wiki : https://wiki.archlinux.org/index.php/Power_management#Sleep_hooks

=== Syncthing ===
 * pour installer le service : `sudo systemctl enable syncthing@david`
 * pour démarrer : `systemctl start syncting`
 * pour voir l'interface `http://127.0.0.1:8080`
 * via un tunnel SSH `ssh -nNT -L 9999:127.0.0.1:41989 do.tyjak.net` (port 9999 pour le web)

=== Systemd ===
 * /etc/systemd/system/docker.service.d/env.conf => ajout de variable d'environement pour le daemon docker
 * systemctl dameon-reload
 * systemclt cat docker.service
 * systemctl restart docker
 * pour les services utilisateurs qui sont dépendants de X11 (dunst ou redshift) ajouter dans .xinitrc : `systemctl --user import-environment DISPLAY` pour qu'ils puissent démarrer


=== Clé USB Crypté ===
 * formatter la clé avec fdisk
 * `cryptsetup luksFormat /dev/sxx` Créer le volume crypté avec un passphrase
 * `cryptsetup open /dev/sxx nom_du_device_ouvert` Map le volume crypté sur le un volume décrypté
 * `mkfs.ext4 /dev/mapper/nom_du_device_ouvert` On format le nouveau volume
 * `mount /dev/mapper/nom_du_device_ouvert /media` On monte enfin le nouveau volume

Les étapes de montage sont :
 # `cryptsetup open /dev/sxx nom_du_device_ouvert`
 # `mount /dev/mapper/nom_du_device_ouvert /media`

Les étapes de démontages :
 # `umount /media`
 # `cryptsetup close nom_du_device_ouvert`

Plus de détail : https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_a_non-root_file_system
Utilsation de udiskie pour le montage automatique
Récupérer l'UUID d'une partition : `lsblk -no NAME,UUID /dev/sdc1`

=== Divers ===
 * Theme sympa : gtk-theme-arc-git
 * `screenfetch` pour avoir des infos sur la configuration
 * Termite : pour le faire reconnaitre sur des serveurs distant : https://www.reddit.com/r/unixporn/comments/4u2uvz/open_terminal_failed_missing_or_unsuitable/
 * clipmenu : dans le code supprimer `--log /dev/stderr` pour que çà fonctionne

== Gdrive ==
 * installation : http://beaveris.me/mount-google-drive-in-archlinux-without-syncing/
 * mount : `google-drive-ocamlfuse -label Gdrive-archlinux ~/gdrive`

=== Son ===
Mise en place du son pour une sortie sur un périphérique airplay
==== installation ====
installer les packets :
 * pulseaudio-alsa + libpulse
 * paprefs + pavucontrol (gui control for pulseaudio)
démarrage auto : `systemctl --user enable pulseaudio`
NOTE : plus besoin du package pusleaudio-raop2 car supporté nativement par pulseaudio à présent
==== utilisation ====
régler le préférences pour pouvoir découvrir les périfériques airplay avec `paprefs` et lancer `pavucontrol` pour régler la sortie son.
==== troubleshooting ====
il faut que le daemon avahi-daemon soit démarré pour que les périphériques puissent être découvrables
si le airplay ne s'affiche pas voir http://raspberrypi.stackexchange.com/questions/5508/redirect-audio-to-another-airplay-device
commandes utiles :

{{{
    pulseaudio --start --log-target=syslog -vvvv --log-level=debug
    pacmd load-module module-raop-discover
    pacmd list-sinks | grep name
}}}

Pour le problème du son qui se remet à 100% voir https://bbs.archlinux.org/viewtopic.php?pid=1103037#p1103037

=== Teamviewer ===
Pour lancer teamviewer il faut tout d'abord lancer le daemon :
`teamview --daemon start`
Puis le client par la suite via dmenu

=== Montage de disque ===

Si problème pour monter un disque distant, s'assurer que rpcbind.service est démarré
`sudo systemctl enable rpcbind.service`
`sudo systemctl start rpcbind.service`

==== Montage auto grace un systemd ====

Pour monter un disque nfs4 automatiquement, ajouter dans fstab :
{{{
    # syno music
    creamy.local:/volume1/music			/creamy/music   nfs4		rw,sync,noauto,x-systemd.automount,_netdev,noatime 0 0
}}}

Pour monter un disque mac automatiquement :
{{{

    # /dev/sdb4
    UUID=575e1f1f-31a6-3993-988c-5008c2f2bac0      /Divers	        hfsplus      	rw,sync,force,noauto,x-systemd.automount	0 2
}}}

=== Musique (mpd) ===

Il faut installer à la main le service : créer le fichier `~/.config/systemd/user/mpd.service`
{{{
    [Unit]
    Description=Music Player Daemon

    [Service]
    ExecStart=/usr/bin/mpd --no-daemon

    [Install]
    WantedBy=default.target
}}}
Ensuite installer de façon classique `service --user mpd enable`
Utilisation de `ncmpcpp` comme client de mpd
Pour les notification utiliser `mpd-notification` et demarrer le en service
Pout les touches multimédias : mettres les commandes dans i3 :
{{{
    bindsym XF86AudioNext exec mpc next
    bindsym XF86AudioPrev exec mpc prev
    bindsym XF86AudioPause exec mpc toggle
}}}

===== ncmpcpp =====
* playlist : espace pour ajouter / fn+backspace pour effacer, [v] pour inverser la selection
* mise à jour de la base : touche "u"
* cheatsheat : https://pkgbuild.com/~jelle/ncmpcpp/
* pour que le visualizer fonctionne il faut dans mpd ajouter cette sortie audio en plus de la sortie ALSA :
{{{
audio_output {
        type                    "fifo"
        name                    "FIFO"
        path                    "/tmp/mpd.fifo"
        format                  "44100:16:2"
}
}}}

==== podcast ====
* logiciel : gpodder
* utilisé avec mplayer en mode slave (création d'un FIFO `mkfifo /tmp/mplayer` dans .xinitrc
* commande pour lecture/pause etc. définie dans i3

=== wine ===

* `wine control` pour voir les applis (pas toutes à priori)
* `wine start /path/to/app.exe` pour lance une application installée

=== TODO ===

 * [ ] ajouter les packages `perl-json-xs` et `perl-anyevent` pour pouvoir enregistrer des layout i3
 * [ ] command pour sauvegarder un layout `i3-save-tree --workspace console > ~/.config/i3/workspace_console.json`
 * [ ] voir pour utiliser gpg et automatiser le lancement de l'agent gpg ou ssh [[https://github.com/ervandew/dotfiles/blob/master/.xinitrc|example de conf]]
 * [ ] Supprimer ario et floola
 * [ ] tester iphone tethering : https://wiki.archlinux.org/index.php/IPhone_tethering
 * [ ] mettre en place un vrai backup (voir https://www.sysnove.fr/blog/2016/06/backupninja-borg.html)
 * [ ] Débug my-crypt-usbkey dans journalctl -xe après être sortie du mode veille
 * [ ] Réussir à pouvoir mettre en hibernation
 * [X] régler le pb du mot de passe stocké sur le presse papier voir https://github.com/cdown/clipmenu/issues/57#issuecomment-443242089
 * [ ] voir pour mutt comment fonctionne LBDB https://www.spinnaker.de/lbdb/

=== ANSIBLE TODO ===

* [ ] faire que termite soir le terminal par défaut (avec i3-sensible-terminal)
* [ ] Installer oh-my-zsh
* [ ] Régler le pb des polices de caractères

== Tips ==
 * visualisation de photos - images : `feh -. {rep photo}`
